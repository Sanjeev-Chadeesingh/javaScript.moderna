NODE(!!!)
    Run code directly on machine instead of on browser

    RUNNING JS CODE WITH NODE
        either
            node filename.js / node => puts you in REPL, runs like console.log() 

    Module System
        Need to use it to share .js files through node 

        it ALL moves on export/require function
        
        function(exports, require, module, __filename, __dirname)
            exports-basically, module.exports
            require-Function to get access to the exports from another file
            module-Object that defines some props+info about the current file
            __filename-full path+file of this file (from which you are NODING)
            __dirname-full path of this file (from which you are NODING) 

                require function and module object are two most important parts of the node function, it's how files/code get shared around, and what node automatically wraps every file in

            Require Cache
                require makes node look for exported requirement, this makes node update require cache, an object with props set to needed files (fileName: fileContents)

                we only execute/require a file ONE SINGLE TIME

            Debugging in Node
                node-inspect fileName.js
                    debugger commands:
                        c-Continue execution until program ends or next debugger statement
                        n-Run the next line of code
                        s-Step into function
                        o-Step out of function
                            run repl when you step in to look

                node --inspect-brk filename.js
                    then jump to chrome://inspect

///////////////////////////////////////////////////////////////////////////////////////
// //this require statement is a relative path to the file needed to run this file
// const message = require('./myScript');

// console.log(message);

// // console.log(require);

code went here

//total output: 0 newLine 1 newLine 1
    //second require statement is going in order, so one gets logged twice
///////////////////////////////////////////////////////////////////////////////////////

Managing Node 
    callbacks
        very common for module methods to end with a callback
            last argument as a callback function that handles data and errors
    
    process.cwd Function    
        returns working directory
            much more reliable than '.'

    package.json generation 
        npm init -y
        scaffold for node project, describes some of its qualities
            scripts are where things are run
            logs any and all dependencies used 